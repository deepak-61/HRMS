version: '3.8'

services:
  # PostgreSQL Database for Employee Service
  postgres:
    image: postgres:15-alpine
    container_name: hrms-postgres
    environment:
      POSTGRES_DB: hrms_employees
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - hrms-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MongoDB Database for HR Operations Service
  mongodb:
    image: mongo:7-jammy
    container_name: hrms-mongodb
    environment:
      MONGO_INITDB_DATABASE: hrms_operations
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    networks:
      - hrms-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Employee Service
  employee-service:
    build:
      context: ./services/employee-service
      dockerfile: Dockerfile
    container_name: hrms-employee-service
    environment:
      NODE_ENV: production
      PORT: 3001
      JWT_SECRET: your-super-secret-jwt-key-change-in-production-hrms-employee-service-2024
      JWT_EXPIRE: 7d
      DATABASE_URL: postgresql://postgres:password@postgres:5432/hrms_employees?schema=public
      HR_OPERATIONS_SERVICE_URL: http://hr-operations-service:3002
      AI_SERVICE_URL: http://ai-service:3003
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - hrms-network
    restart: unless-stopped
    volumes:
      - ./services/employee-service/logs:/app/logs

  # HR Operations Service
  hr-operations-service:
    build:
      context: ./services/hr-operations-service
      dockerfile: Dockerfile
    container_name: hrms-hr-operations-service
    environment:
      NODE_ENV: production
      PORT: 3002
      JWT_SECRET: your-super-secret-jwt-key-change-in-production-hrms-employee-service-2024
      MONGODB_URI: mongodb://mongodb:27017/hrms_operations
      EMPLOYEE_SERVICE_URL: http://employee-service:3001
      AI_SERVICE_URL: http://ai-service:3003
    ports:
      - "3002:3002"
    depends_on:
      mongodb:
        condition: service_healthy
      employee-service:
        condition: service_started
    networks:
      - hrms-network
    restart: unless-stopped
    volumes:
      - ./services/hr-operations-service/logs:/app/logs

  # AI Service (placeholder for RAG implementation)
  ai-service:
    image: node:18-alpine
    container_name: hrms-ai-service
    working_dir: /app
    command: >
      sh -c "
        echo 'AI Service placeholder - implement RAG Q&A system here' &&
        echo 'Server will be available at http://localhost:3003' &&
        while true; do sleep 30; done
      "
    ports:
      - "3003:3003"
    networks:
      - hrms-network
    restart: unless-stopped

  # Frontend React App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: hrms-frontend
    ports:
      - "3000:80"
    depends_on:
      - employee-service
      - hr-operations-service
    networks:
      - hrms-network
    restart: unless-stopped

  # Nginx Reverse Proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: hrms-nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - employee-service
      - hr-operations-service
      - frontend
    networks:
      - hrms-network
    restart: unless-stopped

volumes:
  postgres_data:
  mongodb_data:

networks:
  hrms-network:
    driver: bridge